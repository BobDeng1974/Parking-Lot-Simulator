generateParkingLot()
function parkingLot = generateParkingLot()
    global carID
    carID=1;
    square=input("Do you want a square matrix?: ", 's');

    nRows=randi([2 25]);
    if square=="y"
        nCols=nRows;
    else
        nCols=randi([2 25]);
    end
    parkingLot=zeros(nRows, nCols);
    
    
    
    while hasSpaces(parkingLot)
        int = randi([1, 2],1,1);
        if int==1
            orient="horiz";
        elseif int==2
            orient="vert";
        end

        carSize = randi([2, 3],1,1);
        [rows, cols]=find(parkingLot==0);
        while ~isempty(rows)
            zerosCount=length(rows);
            zero=randi([1, zerosCount],1,1);
            zeroIndex=[rows(zero), cols(zero)];

            if ~carFits(carSize, orient, zeroIndex)
                rows(zero)=[];
                cols(zero)=[];
            else
                showLot(parkingLot)
                break 
            end
        end
    end
    disp(parkingLot)
end
    
function bool = carFits(carSize, orient, zeroIndex)
    global parkingLot
    global carID
    row=zeroIndex(1);
    col=zeroIndex(2);
    if orient=="vert"
        for i = 0:1:carSize-1
            if row-(carSize-1)<1
                bool=false;
                break
            end
            if parkingLot(row-i, col)==0
                parkingLot(row-i, col)=carID;
                bool=true;
            else
                bool=false;
                parkingLot(row-(i-1):row, col)=0;
                break
            end
        end
        if bool==true
            carID=carID+1;
            showLot(parkingLot)
        end
        return
        for i = 0:1:carSize-1
            if row+(carSize-1)>size(parkingLot,1)
                bool=false;
                break
            end
            if parkingLot(row+i, col)==0
                parkingLot(row+i, col)=carID;
                bool=true;
            else
                parkingLot(row:row+(i-1), col)=0;
                bool=false;
                break
            end
        end
        if bool==true
            carID=carID+1;
            showLot(parkingLot)
        end
        return
    elseif orient == "horiz"
        for i = 0:1:carSize-1
            if col-(carSize-1)<1
                bool=false;
                break
            end
            if parkingLot(row, col-i)==0
                parkingLot(row, col-i)=carID;
                bool=true;
            else
                parkingLot(row, col-(i-1):col)=0;
                bool=false;
                break
            end
        end
        if bool==true
            carID=carID+1;
            showLot(parkingLot)
        end
        return
        for i = 0:1:carSize-1
            if col+(carSize-1)>size(parkingLot,2)
                bool=false;
                break
            end
            if parkingLot(row, col+i)==0
                parkingLot(row, col+i)=carID;
                bool=true;
            else
                parkingLot(row, col:col+(i-1))=0;
                bool=false;
                break
            end
        end
        if bool==true
            carID=carID+1;
            showLot(parkingLot)
        end
        return
    end

end




function showLot(parkingLot)
    lotSize=size(parkingLot);
    maxVal=max(max(parkingLot));      %same as number of cars in the parking lot
    image=zeros(lotSize(1), lotSize(2), 3);
    for i = 1:3     %convert to black and white, each car a different shade of gray. no car is completely white, none is completely black.
        image(:,:,i)=((parkingLot/maxVal)*150)+55;    
    end
    spaces=(parkingLot==0)*255;
    image=image+spaces;

    figure(1)
    image=uint8(image);
    image=imresize(image, 50, "nearest");
    imshow(image)
    return
end


